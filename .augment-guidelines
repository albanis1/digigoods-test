# Augment Guidelines

## Architectural Design

- The codebase follows layered architecture:
  - `model` package as the domain layer.
  - `repository` package as the data access layer. Depends on `model`.
  - `controller` package as the presentation layer. Depends on `service`.
  - `service` package as the business/service layer. Depends on `repository` and `model`
  - `dto` (Data Transfer Objects) package to encapsulate request and response data.
- Follow REST API conventions for defining the endpoint URLs and HTTP methods.
- Use centralized error handling in the presentation layer. In Spring Boot, usually this is realized by implementing a global exception handler.

## Data Persistence

- Use PostgreSQL as the database.
- Use Liquibase for database migration.
- Use Spring Data JPA for data access and manipulation.
- Write database changelog files in YAML format compatible to Liquibase.
- Synchronise the database schema from the domain layer into database changelog files.
- Avoid modifying existing database changelog files since we want to keep track of the changes.

## Code Styles

- Use Lombok to reduce boilerplate codes, especially when defining DTO classes.
- Refer to [`.editorconfig`](./.editorconfig) for general code styles such as indentation, line length, end-of-line symbols.
- Run `mvn checkstyle:check` to check for violations of Java code style. If violations found, read the report and try to fix them.

## Testing

- New code should have corresponding unit tests.
- Integration test of the API should be implemented using a Spring's `MockMvc` that can runs locally.
- Functional test of the API should be implemented using Postman collection that executed using `newman`.
- Make sure the tests still pass before and after making modification to the codebase.
- Use JUnit 5 test framework. To run the unit test suite, run `mvn test`. Make sure to run unit test suite before committing any code.
- Follow the convention of Arrange-Act-Assert (AAA) for writing tests, including providing short one-liner comments that denote the sections.
- Since we are using JUnit 5 as the test framework, please note the following when generating tests:
  - Name the test methods more verbosely. Write the test method name using Given-When-Then format.
  - Add `@DisplayName` annotation to all test methods and use descriptive names as the values of the annotation.

## Code Coverage

- When asked to increase a specific source code file, check the coverage report of the said source code file first.
- The coverage report of a source code file can be found in `target/site/jacoco/[package name]/[class name].html`.
- When reading the coverage report, identify which lines and branches that yet to be covered.
- Make sure to run `mvn test` before and after adding tests.

## Maven

- Prefer to use Maven wrapper (`mvnw`) instead of directly calling `mvn` command.

## Irrelevant Context

- Do not read text documents stored in [`docs/private`](./docs/private) directory.
